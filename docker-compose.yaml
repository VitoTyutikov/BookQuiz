version: '2'
services:
  zookeeper:
    restart: always
    image: confluentinc/cp-zookeeper:latest
    tmpfs: "/datalog"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - microservice_network

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservice_network
    

  db:
    image: postgres
    restart: always
    user: postgres
    environment:
      POSTGRES_DB: BookSplit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice_network

  # java-service:
  #   build:
  #     context: ./server
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_started
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/BookSplit
  #     SPRING_DATASOURCE_USERNAME: postgres
  #     SPRING_DATASOURCE_PASSWORD: postgres
  #   networks:
  #     - microservice_network

  # python-fastapi:
  #   build:
  #     context: .
  #     dockerfile: api_openai_export/Dockerfile
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - microservice_network

  # python-consumer:
  #   build:
  #     context: .
  #     dockerfile: api_openai_export/kafka/Dockerfile
  #   depends_on:
  #     kafka:
  #       condition: service_started
  #     python-fastapi:
  #       condition: service_started
  #   networks:
  #     - microservice_network

volumes:
  db-data:

networks:
  microservice_network:
    driver: bridge
